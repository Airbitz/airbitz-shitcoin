{"version":3,"file":"server.js","sources":["../src/server.js"],"sourcesContent":["// server.js\n// @flow\n// BASE SETUP\n// =============================================================================\n\nimport express from 'express'        // call express\nimport bodyParser from 'body-parser'\nimport random from 'random-js'\nimport cors from 'cors'\nimport { bns } from 'biggystring'\n\nconst GENESIS_BLOCK_TIME_MS = 1491004800000 // Apr 1, 2017 00:00 GMT\nconst BLOCK_TIME_SECONDS = 60\nconst MINIMUM_NETWORK_FEE = '20000'\nconst PRIMARY_CURRENCY = 'TRD'\nconst TOKEN_CODES = ['ANA', 'DOGESHIT', 'CRAP']\n\n// call the packages we need\nconst app = express()                 // define our app using express\n\n// configure app to use bodyParser()\n// this will let us get the data from a POST\napp.use(bodyParser.urlencoded({ extended: true }))\napp.use(bodyParser.json())\napp.use(cors())\n\nconst port = process.env.PORT || 8080        // set our port\n\n// Nano for CouchDB\n// =============================================================================\nconst nano = require('nano')('http://shitcoin:kids_in_pool@localhost:5984')\nlet dbTransactions\nlet dbAddresses\nlet init = true\n\nif (init) {\n  nano.db.destroy('dbTransactions', function (err, body, header) {\n    if (err) { console.log('Non-critical error. No tx database') }\n    nano.db.destroy('dbAddresses', function (err, body, header) {\n      if (err) { console.log('Non-critical error. No addr database') }\n      nano.db.create('dbTransactions', function (err, body, header) {\n        if (err) { return err }\n        dbTransactions = nano.db.use('dbTransactions')\n        nano.db.create('dbAddresses', function (err, body, header) {\n          if (err) { return err }\n          dbAddresses = nano.db.use('dbAddresses')\n        })\n      })\n    })\n  })\n} else {\n  dbTransactions = nano.db.use('dbTransactions')\n  dbAddresses = nano.db.use('dbAddresses')\n}\n\n// BASE CLASSES\n// =============================================================================\n\nclass InOutObj {\n  currencyCode:string\n  address:string\n  amount:string\n  constructor (currencyCode:string, address:string, amount:string) {\n    this.currencyCode = currencyCode\n    this.address = address\n    this.amount = amount\n  }\n}\n\nclass TxObj {\n  txid:string\n  networkFee:string\n  inputs:Array<InOutObj>\n  outputs:Array<InOutObj>\n  txDate:number\n  blockHeight:string\n  constructor (inputs:Array<InOutObj>, outputs:Array<InOutObj>, networkFee = '0', blockHeight = '0') {\n    const r = random()\n    this.txid = r.hex(24)\n    this.networkFee = networkFee\n    this.inputs = inputs\n    this.outputs = outputs\n    this.txDate = Date.now() / 1000\n    this.blockHeight = blockHeight\n  }\n}\n\nclass AddressObj {\n  address:string\n  amounts:any\n  txids:Array<string>|null\n  constructor (address:string, trdAmount:string, txids:Array<string>|null) {\n    this.address = address\n    this.amounts = {}\n    this.amounts[PRIMARY_CURRENCY] = trdAmount\n    this.txids = txids\n\n    if (txids) {\n      let n = 1\n      for (let code of TOKEN_CODES) {\n        this.amounts[code] = bns.mul(trdAmount, n.toString())\n        n++\n      }\n    }\n  }\n}\n\n// ROUTES FOR OUR API\n// =============================================================================\nconst router = express.Router()              // get an instance of the express Router\n\n// middleware to use for all requests\nrouter.use(function (req, res, next) {\n    // do logging\n  console.log('Something is happening.')\n  next() // make sure we go to the next routes and don't stop here\n})\n\nrouter.get('/address/:address_id', function (req, res) {\n  console.log('API /address/' + req.params.address_id)\n  dbAddresses.get(req.params.address_id, function (err, addressObj) {\n    if (err) {\n      if (err.error === 'not_found') {\n        // Create address with default funds\n        createAddress(req.params.address_id, function (err, addressObj2) {\n          if (err) {\n            res.json(err)\n          } else {\n            res.json(addressObj2)\n          }\n        })\n      } else {\n        res.json(err)\n      }\n    } else {\n      res.json(addressObj)\n    }\n  })\n})\n\nfunction getBlockHeight (unixTimeSeconds:number):string {\n  // 60s blocks starting at Jan 1 2017 GMT\n  let numBlocks = (unixTimeSeconds - GENESIS_BLOCK_TIME_MS) / (1000 * BLOCK_TIME_SECONDS)\n  numBlocks = Math.floor(numBlocks)\n  return numBlocks.toString()\n}\n\nfunction addBlockHeightToTransaction (txObj:TxObj) {\n  let txHeight:string = bns.add(getBlockHeight(txObj.txDate), '3')\n\n  const now = Date.now() / 1000\n  const blockHeight:string = getBlockHeight(now)\n\n  const heightDiff:string = bns.sub(blockHeight, txHeight)\n  if (bns.lt(heightDiff, '0')) {\n    txHeight = '0'\n  }\n  txObj.blockHeight = txHeight\n}\n\nrouter.get('/transaction/:tx_id', function (req, res) {\n  console.log('API /transaction/' + req.params.tx_id)\n  dbTransactions.get(req.params.tx_id, function (err, response) {\n    if (err) {\n      res.json(err)\n    } else {\n      addBlockHeightToTransaction(response)\n      res.json(response)\n    }\n  })\n})\n\nrouter.get('/height', function (req, res) {\n  console.log('API /height/')\n  const d = Date.now() / 1000\n  const response = {\n    height: getBlockHeight(d)\n  }\n  res.json(response)\n})\n\nrouter.post('/add_token', function (req, res) {\n  const currencyCode = req.body.currencyCode\n  const address = req.body.address\n  const amount = req.body.amount\n\n  // Create Tx that spends from coinbase_tx to address with currencyCode\n  const input = new InOutObj(currencyCode, 'coinbase_tx', amount)\n  const output = new InOutObj(currencyCode, address, amount)\n  const txObj = new TxObj([input], [output])\n\n  // Get addressObj from DB\n  dbAddresses.get(address, function (err, addressObj) {\n    if (err) {\n      res.json(err)\n      return\n    }\n    // Add txid and new amount to addressObj\n    addressObj.txids.push(txObj.txid)\n    if (addressObj.amounts[currencyCode] === undefined) {\n      addressObj.amounts[currencyCode] = 0\n    }\n    addressObj.amounts[currencyCode] += amount\n\n    // Update addressObj and create new tx in db\n    dbAddresses.insert(addressObj, addressObj.address, function (err, response1) {\n      if (err) {\n        res.json(err)\n      } else {\n        dbTransactions.insert(txObj, txObj.txid, function (err, response2) {\n          if (err) {\n            res.json(err)\n          } else {\n            res.json(addressObj)\n          }\n        })\n      }\n    })\n  })\n})\n\nrouter.post('/spend', function (req, res) {\n  let inputs = req.body.inputs\n  let outputs = req.body.outputs\n\n  // Make sure all inputs are >= outputs\n  let totalInputs = {}\n  totalInputs[PRIMARY_CURRENCY] = '0'\n  let totalOutputs = {}\n  totalOutputs[PRIMARY_CURRENCY] = '0'\n  let currencyCodes = [ PRIMARY_CURRENCY ]\n\n  for (const input of inputs) {\n    if (bns.lt(input.amount, 0)) {\n      res.json({err: 'Error: negative input'})\n      return\n    }\n    const currencyCode = input.currencyCode\n    if (totalInputs[currencyCode] === undefined) {\n      totalInputs[currencyCode] = '0'\n    }\n    totalInputs[currencyCode] = bns.add(totalInputs[currencyCode], input.amount)\n\n    if (currencyCodes.indexOf(currencyCode) === -1) {\n      currencyCodes.push(currencyCode)\n    }\n  }\n\n  for (let output of outputs) {\n    if (bns.lt(output.amount, 0)) {\n      res.json({err: 'Error: negative output'})\n      return\n    }\n    const currencyCode = output.currencyCode\n    if (totalOutputs[currencyCode] === undefined) {\n      totalOutputs[currencyCode] = '0'\n    }\n    totalOutputs[currencyCode] = bns.add(totalOutputs[currencyCode], output.amount)\n\n    if (currencyCodes.indexOf(currencyCode) === -1) {\n      currencyCodes.push(currencyCode)\n    }\n  }\n\n  for (let currencyCode of currencyCodes) {\n    if (bns.gt(totalOutputs[currencyCode], totalInputs[currencyCode])) {\n      res.json({err: 'Error: Insufficient funds: ' + currencyCode})\n      return\n    }\n    if (currencyCode !== PRIMARY_CURRENCY) {\n      if (totalOutputs[currencyCode] !== totalInputs[currencyCode]) {\n        res.json({err: 'Error: Inequal input/output for token: ' + currencyCode})\n        return\n      }\n    }\n  }\n\n  const networkFee:string = bns.sub(totalInputs[PRIMARY_CURRENCY], totalOutputs[PRIMARY_CURRENCY])\n  if (bns.lt(networkFee, MINIMUM_NETWORK_FEE)) {\n    res.json({err: 'Error: insufficient network fee'})\n    return\n  }\n\n  // Make sure all input addresses at least have sufficient funds\n  const chkInputs = inputs.slice()\n  checkInputs(chkInputs, function (err, response) {\n    if (err) {\n      res.json(err)\n    } else {\n      const txObj = new TxObj(inputs, outputs, networkFee)\n\n      // Put the new transaction in the tx database\n      dbTransactions.insert(txObj, txObj.txid, function (err, response) {\n        addBlockHeightToTransaction(txObj)\n\n        if (err) {\n          res.json(err)\n        } else {\n          // Update input addresses and output addresses with new balances and\n          // Add txid to their lists\n          const spInputs = inputs.slice()\n          spendInputOutputs(spInputs, 1, txObj.txid, function (err, response) {\n            if (err) {\n              res.json(err)\n            } else {\n              const spOutputs = outputs.slice()\n              spendInputOutputs(spOutputs, 0, txObj.txid, function (err, response) {\n                if (err) {\n                  res.json(err)\n                } else {\n                  res.json({ status: 'Successful Spend', transaction: txObj })\n                }\n              })\n            }\n          })\n        }\n      })\n    }\n  })\n})\n// more routes for our API will happen here\n\n// REGISTER OUR ROUTES -------------------------------\n// all of our routes will be prefixed with /api\napp.use('/api', router)\n\n// START THE SERVER\n// =============================================================================\napp.listen(port)\nconsole.log('Magic happens on port ' + port)\n\nfunction createAddress (addr, cb) {\n  // Parse out the last part of address after \"__\"\n  const parts = addr.split('__')\n  let nativeAmount = '0'\n  let txObj = {}\n\n  if (parts.length > 1) {\n    nativeAmount = parts[parts.length - 1]\n  }\n\n  // Insert the new address\n\n  let txids = null\n  if (bns.gt(nativeAmount, '0')) {\n    let inputs = [ new InOutObj(PRIMARY_CURRENCY, 'coinbase_tx', nativeAmount) ]\n    let outputs = [ new InOutObj(PRIMARY_CURRENCY, addr, nativeAmount) ]\n    let n = 1\n    for (let currencyCode of TOKEN_CODES) {\n      const amt = bns.mul(nativeAmount, n.toString())\n      inputs = inputs.concat([ new InOutObj(currencyCode, 'coinbase_tx', amt) ])\n      outputs = outputs.concat([ new InOutObj(currencyCode, addr, amt) ])\n      n++\n    }\n\n    txObj = new TxObj(inputs, outputs)\n    txids = [ txObj.txid ]\n  }\n  const addressObj = new AddressObj(addr, nativeAmount, txids)\n\n  dbAddresses.insert(addressObj, addr, function (err, res) {\n    if (err) {\n      cb(err)\n    } else if (bns.gt(nativeAmount, '0')) {\n      dbTransactions.insert(txObj, txObj.txid, function (err, res) {\n        if (err) {\n          cb(err)\n        } else {\n          cb(null, addressObj)\n        }\n      })\n    } else {\n      cb(null, addressObj)\n    }\n  })\n}\n\nfunction checkInputs (inputs, cb) {\n  if (inputs.length === 0) {\n    cb(null, true)\n  } else {\n    const input = inputs[0]\n    dbAddresses.get(input.address, function (err, addressObj) {\n      if (err) {\n        cb(err)\n      } else {\n        if (bns.gte(addressObj.amounts[input.currencyCode], input.amount)) {\n          inputs.splice(0, 1)\n          checkInputs(inputs, cb)\n        } else {\n          cb(new Error('Insufficient [' + input.currencyCode + '] funds in address ' + input.address))\n        }\n      }\n    })\n  }\n}\n\nfunction spendInputOutputs (inOuts, bIn, txid, cb) {\n  if (inOuts.length === 0) {\n    cb(null)\n  } else {\n    const inOut = inOuts[0]\n    const currencyCode = inOut.currencyCode\n    dbAddresses.get(inOut.address, function (err, addressObj) {\n      if (err) {\n        cb(err)\n      } else {\n        let amt = inOut.amount\n        if (bIn) {\n          amt *= -1\n        }\n        addressObj.amounts[currencyCode] += amt\n        if (addressObj.txids === undefined) {\n          addressObj.txids = [txid]\n        } else {\n          if (addressObj.txids.indexOf(txid) === -1) {\n            addressObj.txids.push(txid)\n          }\n        }\n\n        dbAddresses.insert(addressObj, inOut.address, function (err, res) {\n          if (err) {\n            cb(err)\n          } else {\n            inOuts.splice(0, 1)\n            spendInputOutputs(inOuts, bIn, txid, cb)\n          }\n        })\n      }\n    })\n  }\n}\n"],"names":["GENESIS_BLOCK_TIME_MS","BLOCK_TIME_SECONDS","MINIMUM_NETWORK_FEE","PRIMARY_CURRENCY","TOKEN_CODES","app","express","use","bodyParser","urlencoded","extended","json","cors","port","process","env","PORT","nano","require","dbTransactions","dbAddresses","init","db","destroy","err","body","header","log","create","InOutObj","currencyCode","address","amount","TxObj","inputs","outputs","networkFee","blockHeight","r","random","txid","hex","txDate","Date","now","AddressObj","trdAmount","txids","amounts","n","code","bns","mul","toString","router","Router","req","res","next","get","params","address_id","addressObj","error","addressObj2","getBlockHeight","unixTimeSeconds","numBlocks","Math","floor","addBlockHeightToTransaction","txObj","txHeight","add","heightDiff","sub","lt","tx_id","response","d","post","input","output","push","undefined","insert","response1","response2","totalInputs","totalOutputs","currencyCodes","indexOf","gt","chkInputs","slice","spInputs","spOutputs","status","transaction","listen","console","createAddress","addr","cb","parts","split","nativeAmount","length","amt","concat","checkInputs","gte","splice","Error","spendInputOutputs","inOuts","bIn","inOut"],"mappings":"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"}